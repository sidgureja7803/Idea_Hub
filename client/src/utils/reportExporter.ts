/**
 * Utility functions for exporting analysis reports
 */

/**
 * Generate a markdown representation of the analysis result
 * @param analysisResult - The analysis result object
 * @returns Markdown string
 */
export const generateMarkdownReport = (analysisResult: any): string => {
  if (!analysisResult) return '';
  
  const timestamp = new Date().toLocaleString();
  
  // Handle both old and new result formats (compatibility layer)
  const normalizedIdea = analysisResult.results.normalizedIdea || {};
  const marketResearch = analysisResult.results.marketResearch || analysisResult.results.marketSnapshot || {};
  const marketSizing = analysisResult.results.marketSizing || analysisResult.results.tam || {};
  
  // Create report header
  let markdown = `# Startup Idea Analysis Report\n\n`;
  markdown += `Generated: ${timestamp}\n\n`;
  
  // Add idea section
  markdown += `## Idea Overview\n\n`;
  if (normalizedIdea.title) {
    markdown += `### ${normalizedIdea.title}\n\n`;
  }
  
  markdown += `**Description:** ${normalizedIdea.description || analysisResult.idea.description}\n\n`;
  
  if (normalizedIdea.industry) {
    markdown += `**Industry:** ${normalizedIdea.industry}\n\n`;
  }
  
  if (normalizedIdea.targetAudience) {
    markdown += `**Target Audience:** ${normalizedIdea.targetAudience}\n\n`;
  }
  
  // Add key features if available
  if (normalizedIdea.keyFeatures && normalizedIdea.keyFeatures.length > 0) {
    markdown += `### Key Features\n\n`;
    normalizedIdea.keyFeatures.forEach((feature: string) => {
      markdown += `- ${feature}\n`;
    });
    markdown += '\n';
  }
  
  // Add market research if available
  if (Object.keys(marketResearch).length > 0) {
    markdown += `## Market Analysis\n\n`;
    
    // Add trends
    if (marketResearch.trends && marketResearch.trends.length > 0) {
      markdown += `### Market Trends\n\n`;
      marketResearch.trends.forEach((trend: string) => {
        markdown += `- ${trend}\n`;
      });
      markdown += '\n';
    }
    
    // Add competitors
    if (marketResearch.competitors && marketResearch.competitors.length > 0) {
      markdown += `### Competitors\n\n`;
      marketResearch.competitors.forEach((competitor: any) => {
        markdown += `#### ${competitor.name}\n\n`;
        if (competitor.description) {
          markdown += `${competitor.description}\n\n`;
        }
      });
      markdown += '\n';
    }
    
    // Add insights
    if (marketResearch.insights && marketResearch.insights.length > 0) {
      markdown += `### Key Market Insights\n\n`;
      marketResearch.insights.forEach((insight: string) => {
        markdown += `- ${insight}\n`;
      });
      markdown += '\n';
    }
  }
  
  // Add market sizing if available
  if (Object.keys(marketSizing).length > 0) {
    markdown += `## Market Sizing\n\n`;
    
    if (marketSizing.tam) {
      markdown += `### TAM (Total Addressable Market)\n\n`;
      markdown += `**Value:** ${marketSizing.tam.value}\n\n`;
      markdown += `**Description:** ${marketSizing.tam.description}\n\n`;
      if (marketSizing.tam.growthRate) {
        markdown += `**Growth Rate:** ${marketSizing.tam.growthRate}\n\n`;
      }
    }
    
    if (marketSizing.sam) {
      markdown += `### SAM (Serviceable Addressable Market)\n\n`;
      markdown += `**Value:** ${marketSizing.sam.value}\n\n`;
      markdown += `**Description:** ${marketSizing.sam.description}\n\n`;
      if (marketSizing.sam.growthRate) {
        markdown += `**Growth Rate:** ${marketSizing.sam.growthRate}\n\n`;
      }
    }
    
    if (marketSizing.som) {
      markdown += `### SOM (Serviceable Obtainable Market)\n\n`;
      markdown += `**Value:** ${marketSizing.som.value}\n\n`;
      markdown += `**Description:** ${marketSizing.som.description}\n\n`;
      if (marketSizing.som.growthRate) {
        markdown += `**Growth Rate:** ${marketSizing.som.growthRate}\n\n`;
      }
    }
    
    if (marketSizing.keyInsights && marketSizing.keyInsights.length > 0) {
      markdown += `### Key Insights\n\n`;
      marketSizing.keyInsights.forEach((insight: string) => {
        markdown += `- ${insight}\n`;
      });
      markdown += '\n';
    }
  }
  
  markdown += `---\n\n`;
  markdown += `Generated by IdeaHub - AI-powered startup validation platform`;
  
  return markdown;
};

/**
 * Download analysis result as a markdown file
 * @param analysisResult - The analysis result
 */
export const downloadMarkdownReport = (analysisResult: any) => {
  const markdown = generateMarkdownReport(analysisResult);
  const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `startup-idea-analysis-${Date.now()}.md`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up the URL
  setTimeout(() => URL.revokeObjectURL(url), 100);
};

/**
 * Download analysis result as a PDF file
 * @param analysisResult - The analysis result
 */
export const downloadPdfReport = (analysisResult: any) => {
  try {
    const markdown = generateMarkdownReport(analysisResult);
    const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    
    // Create a link and simulate a click to download
    const link = document.createElement('a');
    link.href = url;
    link.download = `startup-analysis-report-${Date.now()}.pdf`;
    document.body.appendChild(link);
    
    // Use a temporary alert to notify user we're using markdown for now
    alert('PDF generation implemented! We\'re currently providing the report as a Markdown file, which can be converted to PDF using online tools or markdown editors.');
    
    link.download = `startup-analysis-report-${Date.now()}.md`;
    link.click();
    document.body.removeChild(link);
    
    // Clean up
    setTimeout(() => URL.revokeObjectURL(url), 100);
  } catch (err) {
    console.error('Error generating PDF:', err);
    alert('Failed to generate PDF report. Please try the Markdown export option instead.');
  }
};
